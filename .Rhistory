labels = as.vector(matrix(rep(B, N), byrow = T, nrow = N, ncol = G))
dat = data.frame(cbind(as.vector(Y_mean), rep(X_mean[,1], G),  labels))
names(dat) = c("y", "x1", "labels")
b = matrix(0, nrow = 5, ncol = 1)
for(i in 1:5) {
d = dat[labels == i, ]
get_line = lm(y ~ x1 - 1, data = d)
b[i,] = get_line$coefficients
}
b
bmat <- matrix(rep(b[1,], N), nrow = N, byrow = T)
X_samples = X_samples * as.vector(bmat)
X_mean = apply(X_samples, c(1, 2), mean)
labels = as.vector(matrix(rep(B, N), byrow = T, nrow = N, ncol = G))
dat = data.frame(cbind(as.vector(Y_mean), rep(X_mean[,1], G),  labels))
names(dat) = c("y", "x1", "labels")
b = matrix(0, nrow = 5, ncol = 1)
for(i in 1:5) {
d = dat[labels == i, ]
get_line = lm(y ~ x1 - 1, data = d)
b[i,] = get_line$coefficients
}
b
B
ggplot(dat) + facet_wrap(~ labels) + geom_point(aes(x1, y)) + geom_abline(aes(slope = labels), intercept = 0)
ggplot(dat) + facet_wrap(~ labels, nrow = 5) + geom_point(aes(x1, y)) + geom_abline(aes(slope = labels), intercept = 0, col = "red")
ggplot(dat) + facet_wrap(~ labels, nrow = 1) + geom_point(aes(x1, y)) + geom_abline(aes(slope = labels), intercept = 0, col = "red")
X_samples = out$X
Y_samples = out$Y
X_mean = apply(X_samples, c(1, 2), mean)
Y_mean = apply(Y_samples, c(1, 2), mean)
labels = as.vector(matrix(rep(B, N), byrow = T, nrow = N, ncol = G))
dat = data.frame(cbind(as.vector(Y_mean), rep(X_mean[,1], G),  labels))
names(dat) = c("y", "x1", "labels")
b = matrix(0, nrow = 5, ncol = 1)
for(i in 1:5) {
d = dat[labels == i, ]
get_line = lm(y ~ x1 - 1, data = d)
b[i,] = get_line$coefficients
}
b
b/b[1,1]
out$accept
boxplot(out$accept)
hist(out$accept)
test <- matrix(rnorm(N*2), nrow = N)
var(test)
library(mvrnorm)
library(mvtnorm)
test <- mvrnorm(N, numeric(2), Sigma = diag(2))
test <- rmvnorm(N, numeric(2), Sigma = diag(2))
test <- rmvnorm(N, numeric(2), sigma = diag(2))
var(test)
test <- rmvnorm(N, numeric(2), sigma = diag(2))
var(test)
var(test)
test <- rmvnorm(N, numeric(2), sigma = diag(2))
var(test)
if(.Platform$OS.type == "unix"){
source('~/Dropbox/~PhD/~Research/Biclustering/Code/analysis_functions.R', echo=TRUE)
source('~/Dropbox/~PhD/~Research/Biclustering/Code/biclustering_functions.R', echo=TRUE)
setwd("/Users/gem/Dropbox/~PhD/~Research/Biclustering/Examples/Sim1")
} else {
source('C:/Users/gmoran/Dropbox/~PhD/~Research/Biclustering/Code/analysis_functions.R', echo=TRUE)
source('C:/Users/gmoran/Dropbox/~PhD/~Research/Biclustering/Code/biclustering_functions.R', echo=TRUE)
setwd("C:/Users/gmoran/Dropbox/~PhD/~Research/Biclustering/Examples/Sim1")
}
# Packages
## install FABIA package
# source("https://bioconductor.org/biocLite.R")
# biocLite("fabia")
library(fabia)
library(SSLB)
source('~/Dropbox/~PhD/~Research/Biclustering/Examples/Sim1/sim1.R', echo=TRUE)
library(fabia)
library(SSLB)
###################################
# Example 1: sparse factors/loadings
###################################
N = 2000
G = 2000
K = 10
K_init = 30
# # get data
# dat = makeFabiaDataBlocksPos(n = N, l = G, p = K,
#                           f1 = 10, f2 = 10, of1 = 5, of2 = 10, sd_noise = 3,
#                           sd_z_noise = 0.2, mean_z = 2, sd_z = 1,
#                           sd_l_noise = 0.2, mean_l = 3, sd_l = 1)
# Y = dat[[1]]
# ZC = dat[[3]]
# LC = dat[[4]]
#
# B = matrix(0, nrow = G, ncol = K)
# X = matrix(0, nrow = N, ncol = K)
#
# for(k in 1:K) {
#   B[ZC[[k]], k] = 1
#   X[LC[[k]], k] = 1
# }
#
#
# # write data to .txt for BicMix
# write.table(t(Y), file="Y.txt", row.names = FALSE, col.names = FALSE)
# write.table(X, file = "X.txt", row.names = FALSE, col.names = FALSE)
# write.table(B, file = "B.txt", row.names = FALSE, col.names = FALSE)
#
# read in data
Y = t(as.matrix(read.table("Y.txt")))
X = as.matrix(read.table("X.txt"))
B = as.matrix(read.table("B.txt"))
g_X = plot_matrix(X, title = "True X (K = 10)", xlab = "K", ylab = "N")
g_B = plot_matrix(B, title = "True B (K = 10)", xlab = "K", ylab = "G")
grid.arrange(g_X, g_B, nrow = 1)
get_svd = svd(Y)
X_svd = sqrt(get_svd$d) * (get_svd$u)
B_svd = t(sqrt(get_svd$d) * t(get_svd$v))
sigmas = apply(Y, 2, function(x) quantile(x, 0.75)-quantile(x, 0.25)) / 1.35
sigY = t(1 / sigmas * t(Y))
XY = crossprod(X_svd[, 1:K_init], sigY)
BY = crossprod(B_svd[, 1:K_init], t(Y))
lambda0_max = quantile(abs(XY), 0.95)
lambda0_tilde_max = quantile(abs(BY), 0.95)
lambda_ratio = ifelse(N < G, 0.01, 0.0001)
lambda1 = lambda_ratio * lambda0_max
lambda1_tilde = lambda_ratio * lambda0_tilde_max
lambda0s = seq(lambda1, lambda0_max, length = 10)
lambda0_tildes = seq(lambda1_tilde, lambda0_tilde_max, length = 10)
lambda0s
lambda0_tildes
lambda0s = c(1, 5, 10, 20, 30)
lambda0_tildes = c(1, 5, 10, 20, 30)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
for(i in 1:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
lambda1
lambda1_tilde
lambda0s = 0.1 * c(1, 5, 10, 20, 30)
lambda0_tildes = c(1, 5, 10, 20, 30)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
lambda0s = seq(lambda1, lambda0_max, length = 10)
lambda0_tildes = seq(lambda1_tilde, lambda0_tilde_max, length = 10)
lambda0s
lambda0_tildes
lambda_ratio
lambda0s = seq(lambda1, 0.5 * lambda0_max, length = 10)
lambda0_tildes = seq(lambda1_tilde, 0.5 * lambda0_tilde_max, length = 10)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
for(i in 1:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
K_est
lambda0s
lambda0_tildes
lambda0s = seq(lambda1, lambda0_max, length = 20)
lambda0_tildes = seq(lambda1_tilde, lambda0_tilde_max, length = 20)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
lambda0s
i = 2
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
plot_matrix(out_thresh[[i]]$X)
plot_matrix(out_thresh[[i]]$B)
lambda0s = seq(lambda1, 0.1 * lambda0_max, length = 10)
lambda0_tildes = seq(lambda1_tilde, 0.1 * lambda0_tilde_max, length = 10)
lambda0s
lambda0_tilde_max
lambda0_tildes
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_esy
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
#### FABIA ##################
library(fabia)
result_FABIA = fabia(Y, K_init, 0.01, 400)
# threshold FABIA result
FABIA_thresh = extractBic(result_FABIA)
FABIA_thresh$np
FABIA_thresh = FABIA_threshold(X_FABIA, B_FABIA, X_thresh = 0.5)
X_FABIA_thresh = FABIA_thresh$X_FABIA_thresh
B_FABIA_thresh = FABIA_thresh$B_FABIA_thresh
B_FABIA = t(result_FABIA@Z)
X_FABIA = result_FABIA@L
Y_FABIA = result_FABIA@LZ
# threshold FABIA result
FABIA_thresh = FABIA_threshold(X_FABIA, B_FABIA, X_thresh = 0.5)
X_FABIA_thresh = FABIA_thresh$X_FABIA_thresh
B_FABIA_thresh = FABIA_thresh$B_FABIA_thresh
zeroes_B = which(apply(B_FABIA_thresh, 2, function(x) all(x == 0)))
zeroes_X = which(apply(X_FABIA_thresh, 2, function(x) all(x == 0)))
zeroes = union(zeroes_B, zeroes_X)
K_FABIA = K_init - length(zeroes)
K_FABIA
X_FABIA_thresh = X_FABIA_thresh[,-zeroes]
B_FABIA_thresh = B_FABIA_thresh[,-zeroes]
X_FABIA_zero = X_FABIA_thresh
B_FABIA_zero = B_FABIA_thresh
X_FABIA_zero[X_FABIA_zero != 0] = 1
B_FABIA_zero[B_FABIA_zero != 0] = 1
g_X_FABIA = plot_matrix(X_FABIA_zero, title = substitute(paste("X   (FABIA, K = ", k0, ")"),
list(k0= K_FABIA)), xlab = "K", ylab = "N")
g_B_FABIA = plot_matrix(B_FABIA_zero, title = substitute(paste("B   (FABIA, K = ", k0, ")"),
list(k0= K_FABIA)), xlab = "K", ylab = "G")
grid.arrange(g_X, g_X_FABIA,
g_B, g_B_FABIA, nrow = 2, as.table = F)
g_B_FABIA
K_est
rbind(K_est, lambda0s)
for(i in 1:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
i
# plot
for(i in 4:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
lambda0s = seq(10 * lambda1, lambda0_max, length = 10)
lambda0_tildes = seq(10 * lambda1_tilde, lambda0_tilde_max, length = 10)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
X_bicmix = as.matrix(read.table("result/EX", header = F))
X_bicmix = t(X_bicmix)
B_bicmix = as.matrix(read.table("result/LAM", header = F))
K_bicmix = ncol(B_bicmix)
K_bicmix
# get metrics
metrics_bicmix = biclust_analysis(X, B, X_bicmix_thresh, B_bicmix_thresh)
plot_matrix(X_bicmix)
plot_matrix(B_bicmix)
apply(X_bicmix, 2, function(x) all(x == 0))
X_bicmix_zero = X_bicmix_thresh
B_bicmix_zero = B_bicmix_thresh
X_bicmix_zero[X_bicmix_zero != 0] = 1
B_bicmix_zero[B_bicmix_zero != 0] = 1
g_X_bicmix = plot_matrix(X_bicmix_zero, title = substitute(paste("X   (BicMix, K = ", k0, ")"),
list(k0= K_bicmix)), xlab = "K", ylab = "N")
g_B_bicmix = plot_matrix(B_bicmix_zero, title = substitute(paste("B   (BicMix, K = ", k0, ")"),
list(k0= K_bicmix)), xlab = "K", ylab = "G")
grid.arrange(g_X, g_X_bicmix,
g_B, g_B_bicmix, nrow = 2, as.table = F)
X_bicmix_thresh = X_bicmix
B_bicmix_thresh = B_bicmix
X_bicmix_zero = X_bicmix_thresh
B_bicmix_zero = B_bicmix_thresh
X_bicmix_zero[X_bicmix_zero != 0] = 1
B_bicmix_zero[B_bicmix_zero != 0] = 1
g_X_bicmix = plot_matrix(X_bicmix_zero, title = substitute(paste("X   (BicMix, K = ", k0, ")"),
list(k0= K_bicmix)), xlab = "K", ylab = "N")
g_B_bicmix = plot_matrix(B_bicmix_zero, title = substitute(paste("B   (BicMix, K = ", k0, ")"),
list(k0= K_bicmix)), xlab = "K", ylab = "G")
grid.arrange(g_X, g_X_bicmix,
g_B, g_B_bicmix, nrow = 2, as.table = F)
lambda0s = seq(lambda1, 0.1 * lambda0_max, length = 10)
lambda0_tildes = seq(lambda1_tilde, 0.1 * lambda0_tilde_max, length = 10)
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
lambda0s
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
lambda0s
lambda0_tildes
lambda0s = exp(seq(log(lambda1), log(lambda0_max), length = 10))
lambda0_tildes = exp(seq(log(lambda1_tilde), log(lambda0_tilde_max), length = 10))
lambda0s
lambda0_tildes
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
# plot
for(i in 1:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
SSLB_rr
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
lambda0s
K_est
# plot
for(i in 7:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
lambda0s = exp(seq(log(lambda1), log(0.1 * lambda0_max), length = 10))
lambda0_tildes = exp(seq(log(lambda1_tilde), log(0.1 * lambda0_tilde_max), length = 10))
time = system.time(out <- SSLB(Y, K_init, lambda1, lambda0s, lambda1_tilde, lambda0_tildes, MAX_ITER = 500))
out_thresh = SSLB_threshold(out)
L = length(out_thresh)
K_est = numeric(L)
for(i in 1:L) {
K_est[i] = out_thresh[[i]]$K
}
K_est
SSLB_rr = matrix(NA, nrow = L, ncol = 2)
for(i in 1:L){
if(K_est[i] > 1) {
SSLB_rr[i,] = biclust_analysis(X, B, out_thresh[[i]]$X, out_thresh[[i]]$B)$rr
}
}
SSLB_rr
K_FABIA
# get metrics
metrics_FABIA = biclust_analysis(X, B, X_FABIA_thresh, B_FABIA_thresh)
metrics_FABIA
X_FABIA_zero = X_FABIA_thresh
B_FABIA_zero = B_FABIA_thresh
X_FABIA_zero[X_FABIA_zero != 0] = 1
B_FABIA_zero[B_FABIA_zero != 0] = 1
g_X_FABIA = plot_matrix(X_FABIA_zero, title = substitute(paste("X   (FABIA, K = ", k0, ")"),
list(k0= K_FABIA)), xlab = "K", ylab = "N")
g_B_FABIA = plot_matrix(B_FABIA_zero, title = substitute(paste("B   (FABIA, K = ", k0, ")"),
list(k0= K_FABIA)), xlab = "K", ylab = "G")
grid.arrange(g_X, g_X_FABIA,
g_B, g_B_FABIA, nrow = 2, as.table = F)
dim(X_FABIA_thresh)
g_X
g_X_FABIA
g_B_FABIA
K_est
i = 10
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
g_B_SSLB
# plot
for(i in 8:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
g_X
g_B
g_X_SSLB
g_B_SSLB
i
for(i in 8:L) {
if(K_est[i] > 0) {
g_X_SSLB = plot_matrix(out_thresh[[i]]$X, xlab = "K", ylab = "N",
title = substitute(paste("X (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0_tilde, k0 = K_est[i])))
g_B_SSLB = plot_matrix(out_thresh[[i]]$B, xlab = "K", ylab = "G",
title = substitute(paste("B (", lambda[0], " = ", l0, ", K = ", k0, ")"),
list(l0 = out[[i]]$lambda0, k0= K_est[i])))
grid.arrange(g_X, g_X_SSLB, g_B, g_B_SSLB, nrow = 2)
}
}
K_est
library(tools)
setwd("~/Dropbox/~PhD/~Research/Biclustering/Package/SSLB")
package_native_routine_registration_skeleton()
package_native_routine_registration_skeleton("~/Dropbox/~PhD/~Research/Biclustering/Package/SSLB")
